// File: ALU.v
// Generated by MyHDL 1.0dev
// Date: Mon Nov 28 07:46:24 2016


`timescale 1ns/10ps

module ALU (
    inA,
    inB,
    ALUop,
    out,
    flag
);
// Unidad Logica Aritmetica del Procesador
// 
// Lista de parametros:
// flag: bandera, va a control unit. Se activa si la salida es igual a cero        (1b)
// inA : entrada A. Proviene de los registros                                      (32b)
// inB : entrada B. Proviene de Mux 2                                              (32b)
// ALUOp  : selector de operaciones. Proviene de control unit                      (4b)
// out : salida, resultado de la operaciÃ³n                                         (32b)

input [31:0] inA;
input [31:0] inB;
input [3:0] ALUop;
output [31:0] out;
reg [31:0] out;
output [0:0] flag;
reg [0:0] flag;




always @(inA, inB, ALUop) begin: ALU_OUTPUT
    flag = 0;
    case (ALUop)
        'h0: begin
            out = (inA + inB);
            if (((inA + inB) == 0)) begin
                flag = 1;
            end
        end
        'h1: begin
            out = (inA - inB);
            if ((($signed({1'b0, inA}) - $signed({1'b0, inB})) == 0)) begin
                flag = 1;
            end
        end
        'h2: begin
            out = (inA ^ inB);
            if (((inA ^ inB) == 0)) begin
                flag = 1;
            end
        end
        'h3: begin
            out = (inA | inB);
            if (((inA | inB) == 0)) begin
                flag = 1;
            end
        end
        'h4: begin
            out = (inA & inB);
            if (((inA & inB) == 0)) begin
                flag = 1;
            end
        end
        'h5: begin
            out = (inA >>> inB[5-1:0]);
            if (((inA >>> inB[5-1:0]) == 0)) begin
                flag = 1;
            end
        end
        'h6: begin
            out = (inA << inB[5-1:0]);
            if (((inA << inB[5-1:0]) == 0)) begin
                flag = 1;
            end
        end
        'h7: begin
            out = $signed($signed(inA) >>> inB[5-1:0]);
            if (($signed($signed(inA) >>> inB[5-1:0]) == 0)) begin
                flag = 1;
            end
        end
        'h8: begin
            if ((($signed(inA) - $signed(inB)) < 0)) begin
                out = 32'h1;
            end
            else begin
                out = 32'h0;
                flag = 1;
            end
        end
        'h9: begin
            if ((($signed({1'b0, inA}) - $signed({1'b0, inB})) < 0)) begin
                out = 32'h1;
            end
            else begin
                out = 32'h0;
                flag = 1;
            end
        end
        'ha: begin
            if ((inA == inB)) begin
                out = 32'h1;
            end
            else begin
                out = 32'h0;
                flag = 1;
            end
        end
        'hb: begin
            if ((inA != inB)) begin
                out = 32'h1;
            end
            else begin
                out = 32'h0;
                flag = 1;
            end
        end
        'hc: begin
            if ((($signed(inA) - $signed(inB)) < 0)) begin
                out = 32'h0;
                flag = 1;
            end
            else begin
                out = 32'h1;
            end
        end
        'hd: begin
            if ((($signed({1'b0, inA}) - $signed({1'b0, inB})) < 0)) begin
                out = 32'h0;
                flag = 1;
            end
            else begin
                out = 32'h1;
            end
        end
        'he: begin
            if ((($signed(inA) - $signed(inB)) < 0)) begin
                out = 32'h1;
            end
            else begin
                out = 32'h0;
                flag = 1;
            end
        end
        'hf: begin
            if ((($signed({1'b0, inA}) - $signed({1'b0, inB})) < 0)) begin
                out = 32'h1;
            end
            else begin
                out = 32'h0;
                flag = 1;
            end
        end
    endcase
end

endmodule
