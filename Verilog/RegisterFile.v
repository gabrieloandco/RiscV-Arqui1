// File: RegisterFile.v
// Generated by MyHDL 1.0dev
// Date: Mon Nov 28 07:45:05 2016


`timescale 1ns/10ps

module RegisterFile (
    clk,
    reset,
    we,
    w_addr,
    a_addr,
    b_addr,
    data_w,
    read_A,
    read_B
);
// PINES DE ENTRADA:
// clk = Clock
// we = Write Enable
// data_w = Data Write (La data que se escribira)
// w_addr = Write address (Donde se escribira)
// a_addr = A address (Donde quiero leer A)
// b_addr = B Adress
// 
// PINES DE SALIDA:
// read_A = Data read from A (Lo que lei de A)
// read_B = Data read from B (Lo que lei de B)
//     

input clk;
input reset;
input we;
input [4:0] w_addr;
input [4:0] a_addr;
input [4:0] b_addr;
input [31:0] data_w;
output [31:0] read_A;
reg [31:0] read_A;
output [31:0] read_B;
reg [31:0] read_B;

reg [31:0] regs [0:32-1];



always @(posedge clk, posedge reset) begin: REGISTERFILE_WRITE
    if (reset == 1) begin
        regs[0] <= 0;
        regs[1] <= 0;
        regs[2] <= 0;
        regs[3] <= 0;
        regs[4] <= 0;
        regs[5] <= 0;
        regs[6] <= 0;
        regs[7] <= 0;
        regs[8] <= 0;
        regs[9] <= 0;
        regs[10] <= 0;
        regs[11] <= 0;
        regs[12] <= 0;
        regs[13] <= 0;
        regs[14] <= 0;
        regs[15] <= 0;
        regs[16] <= 0;
        regs[17] <= 0;
        regs[18] <= 0;
        regs[19] <= 0;
        regs[20] <= 0;
        regs[21] <= 0;
        regs[22] <= 0;
        regs[23] <= 0;
        regs[24] <= 0;
        regs[25] <= 0;
        regs[26] <= 0;
        regs[27] <= 0;
        regs[28] <= 0;
        regs[29] <= 0;
        regs[30] <= 0;
        regs[31] <= 0;
    end
    else begin
        if (((w_addr != 0) && (we == 1) && (reset == 0))) begin
            regs[w_addr] <= data_w;
        end
        else if ((reset == 1)) begin
            regs[0] <= 0;
            regs[1] <= 0;
            regs[2] <= 0;
            regs[3] <= 0;
            regs[4] <= 0;
            regs[5] <= 0;
            regs[6] <= 0;
            regs[7] <= 0;
            regs[8] <= 0;
            regs[9] <= 0;
            regs[10] <= 0;
            regs[11] <= 0;
            regs[12] <= 0;
            regs[13] <= 0;
            regs[14] <= 0;
            regs[15] <= 0;
            regs[16] <= 0;
            regs[17] <= 0;
            regs[18] <= 0;
            regs[19] <= 0;
            regs[20] <= 0;
            regs[21] <= 0;
            regs[22] <= 0;
            regs[23] <= 0;
            regs[24] <= 0;
            regs[25] <= 0;
            regs[26] <= 0;
            regs[27] <= 0;
            regs[28] <= 0;
            regs[29] <= 0;
            regs[30] <= 0;
            regs[31] <= 0;
        end
        else begin
            regs[w_addr] <= regs[w_addr];
        end
    end
end


always @(b_addr, a_addr, regs[0], regs[1], regs[2], regs[3], regs[4], regs[5], regs[6], regs[7], regs[8], regs[9], regs[10], regs[11], regs[12], regs[13], regs[14], regs[15], regs[16], regs[17], regs[18], regs[19], regs[20], regs[21], regs[22], regs[23], regs[24], regs[25], regs[26], regs[27], regs[28], regs[29], regs[30], regs[31]) begin: REGISTERFILE_READ
    if ((a_addr == 0)) begin
        read_A = 0;
    end
    else begin
        read_A = regs[a_addr];
    end
    if ((b_addr == 0)) begin
        read_B = 0;
    end
    else begin
        read_B = regs[b_addr];
    end
end

endmodule
