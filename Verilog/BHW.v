// File: BHW.v
// Generated by MyHDL 1.0dev
// Date: Wed Nov  2 10:44:05 2016


`timescale 1ns/10ps

module BHW (
    DWidth,
    Dir_Data,
    Datain,
    Dataout
);
// Entradas: DWidth, Dir_Data, Datain.
// Salidas: Dataout.
// 
// Descripcion:
// Este modulo es el encargado de recibir el dato Byte, Halfword o Word en (32bits), realizar alguna extension si es necesario.
// 
// Dir_Data(2 bits): Los 2 LSB de la direccion de dato.
// DWidth(3 bits): Salida de la CU define la longitud del dato a realizar la operacion Load.
// Datain(32bits): Salida de la memoria RAM contiene el dato a guardar el los registros.
// Dataout(32bits): Dato dirigido a los registros para ser guardado.

input [2:0] DWidth;
input [1:0] Dir_Data;
input [31:0] Datain;
output [31:0] Dataout;
reg [31:0] Dataout;




always @(DWidth, Datain, Dir_Data) begin: BHW_BEHAVIORBHW
    case (DWidth)
        'h0: begin
            case (Dir_Data)
                'h0: begin
                    Dataout = {Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[8-1:0]};
                end
                'h1: begin
                    Dataout = {Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[16-1:8]};
                end
                'h2: begin
                    Dataout = {Datain[23], Datain[23], Datain[23], Datain[23], Datain[23], Datain[23], Datain[23], Datain[23], Datain[23], Datain[23], Datain[23], Datain[23], Datain[23], Datain[23], Datain[23], Datain[23], Datain[23], Datain[23], Datain[23], Datain[23], Datain[23], Datain[23], Datain[23], Datain[23], Datain[24-1:16]};
                end
                'h3: begin
                    Dataout = {Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[32-1:24]};
                end
                default: begin
                    Dataout = {Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[7], Datain[8-1:0]};
                end
            endcase
        end
        'h1: begin
            if (((Dir_Data == 0) || (Dir_Data == 1))) begin
                Dataout = {Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[16-1:0]};
            end
            else if (((Dir_Data == 2) || (Dir_Data == 3))) begin
                Dataout = {Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[31], Datain[32-1:16]};
            end
            else begin
                Dataout = {Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[15], Datain[16-1:0]};
            end
        end
        'h2: begin
            Dataout = Datain;
        end
        'h3: begin
            case (Dir_Data)
                'h0: begin
                    Dataout = {(0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), Datain[8-1:0]};
                end
                'h1: begin
                    Dataout = {(0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), Datain[16-1:8]};
                end
                'h2: begin
                    Dataout = {(0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), Datain[24-1:16]};
                end
                'h3: begin
                    Dataout = {(0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), Datain[32-1:24]};
                end
                default: begin
                    Dataout = {(0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), Datain[8-1:0]};
                end
            endcase
        end
        'h4: begin
            if (((Dir_Data == 0) || (Dir_Data == 1))) begin
                Dataout = {(0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), Datain[16-1:0]};
            end
            else if (((Dir_Data == 2) || (Dir_Data == 3))) begin
                Dataout = {(0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), Datain[32-1:16]};
            end
            else begin
                Dataout = {(0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), (0 != 0), Datain[16-1:0]};
            end
        end
        default: begin
            Dataout = Datain;
        end
    endcase
end

endmodule
