// File: CPR.v
// Generated by MyHDL 1.0dev
// Date: Tue Nov 29 13:03:52 2016


`timescale 1ns/10ps

module CPR (
    clk,
    reset,
    DataOutRAM,
    dirdato,
    ALUout,
    Done,
    datainstruccion,
    Opcode,
    PCEN_BHW,
    Reg_Ok,
    Address,
    WE,
    RE,
    Ok_PC
);


input clk;
input reset;
input [31:0] DataOutRAM;
input [31:0] dirdato;
input [31:0] ALUout;
input Done;
output [31:0] datainstruccion;
wire [31:0] datainstruccion;
input [6:0] Opcode;
output [31:0] PCEN_BHW;
reg [31:0] PCEN_BHW;
output Reg_Ok;
reg Reg_Ok;
output [31:0] Address;
reg [31:0] Address;
output WE;
reg WE;
output RE;
reg RE;
output Ok_PC;
reg Ok_PC;

reg [0:0] Demux_Sel;
reg [0:0] MBR_go;
reg [31:0] Demux_MBR;
reg [0:0] Mux5_Sel;
reg [1:0] FSM_1_EstadoPresente;
reg [31:0] MBR_1_register;



always @(posedge clk, posedge reset) begin: CPR_FSM_1_LOGIC
    if (reset == 1) begin
        Demux_Sel <= 0;
        Ok_PC <= 0;
        MBR_go <= 0;
        FSM_1_EstadoPresente <= 0;
        WE <= 0;
        Mux5_Sel <= 0;
        RE <= 0;
        Reg_Ok <= 0;
    end
    else begin
        if ((reset == 1)) begin
            WE <= 0;
            RE <= 0;
            Demux_Sel <= 0;
            Mux5_Sel <= 0;
            MBR_go <= 0;
            Reg_Ok <= 0;
            Ok_PC <= 1;
            FSM_1_EstadoPresente <= 0;
        end
        else begin
            case (FSM_1_EstadoPresente)
                'h0: begin
                    WE <= 0;
                    RE <= 1;
                    Demux_Sel <= 0;
                    Mux5_Sel <= 0;
                    MBR_go <= 0;
                    Reg_Ok <= 0;
                    Ok_PC <= 0;
                    if ((Done == 1)) begin
                        MBR_go <= 1;
                        FSM_1_EstadoPresente <= 1;
                    end
                end
                'h1: begin
                    WE <= 0;
                    RE <= 0;
                    Demux_Sel <= 0;
                    Mux5_Sel <= 0;
                    MBR_go <= 0;
                    Reg_Ok <= 0;
                    Ok_PC <= 0;
                    if (((Opcode != 3) && (Opcode != 35))) begin
                        Ok_PC <= 1;
                        Reg_Ok <= 1;
                        FSM_1_EstadoPresente <= 0;
                    end
                    else if ((Opcode == 3)) begin
                        FSM_1_EstadoPresente <= 2;
                    end
                    else if ((Opcode == 35)) begin
                        FSM_1_EstadoPresente <= 3;
                    end
                end
                'h2: begin
                    WE <= 1;
                    RE <= 1;
                    Demux_Sel <= 1;
                    Mux5_Sel <= 1;
                    MBR_go <= 0;
                    Reg_Ok <= 0;
                    Ok_PC <= 0;
                    if ((Done == 1)) begin
                        Ok_PC <= 1;
                        Reg_Ok <= 1;
                        FSM_1_EstadoPresente <= 0;
                    end
                end
                'h3: begin
                    WE <= 1;
                    RE <= 1;
                    Demux_Sel <= 0;
                    Mux5_Sel <= 1;
                    MBR_go <= 0;
                    Reg_Ok <= 0;
                    Ok_PC <= 0;
                    if ((Done == 1)) begin
                        Ok_PC <= 1;
                        FSM_1_EstadoPresente <= 0;
                    end
                end
                default: begin
                    WE <= 0;
                    RE <= 0;
                    Demux_Sel <= 0;
                    Mux5_Sel <= 0;
                    MBR_go <= 0;
                    Reg_Ok <= 0;
                    Ok_PC <= 1;
                    FSM_1_EstadoPresente <= 0;
                end
            endcase
        end
    end
end


always @(dirdato, Mux5_Sel, ALUout) begin: CPR_MUX2_1_BEHAVIOR_MUX2
    if ((Mux5_Sel == 0)) begin
        Address = dirdato;
    end
    else begin
        Address = ALUout;
    end
end



assign datainstruccion = MBR_1_register;


always @(posedge clk, posedge reset) begin: CPR_MBR_1_WRITE
    if (reset == 1) begin
        MBR_1_register <= 0;
    end
    else begin
        if ((MBR_go == 1)) begin
            MBR_1_register <= Demux_MBR;
        end
        else if ((reset == 1)) begin
            MBR_1_register <= 0;
        end
        else begin
            MBR_1_register <= MBR_1_register;
        end
    end
end


always @(DataOutRAM, Demux_Sel) begin: CPR_DEMUX_1_BEHAVIOR_DEMUX
    Demux_MBR = 0;
    PCEN_BHW = 0;
    if ((Demux_Sel == 0)) begin
        Demux_MBR = DataOutRAM;
    end
    else begin
        PCEN_BHW = DataOutRAM;
    end
end

endmodule
